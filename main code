
# For efficacy (response: "responders")
eff_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "responders", transform = TRUE)
# Check summary of efficacy predictions:
print(summary(eff_preds))
eff_median <- apply(eff_preds, 2, median)
eff_lower  <- apply(eff_preds, 2, quantile, 0.025)
eff_upper  <- apply(eff_preds, 2, quantile, 0.975)
# For toxicity (response: "CRScases")
tox_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "CRScases", transform = TRUE)
# Check summary of toxicity predictions:
print(summary(tox_preds))
tox_median <- apply(tox_preds, 2, median)
tox_lower  <- apply(tox_preds, 2, quantile, 0.025)
tox_upper  <- apply(tox_preds, 2, quantile, 0.975)
# -----------------------------
# -----------------------------
eff_plot_data <- data.frame(
  dose = dose_seq,
  median = eff_median,
  lower  = eff_lower,
  upper  = eff_upper
)
tox_plot_data <- data.frame(
  dose = dose_seq,
  median = tox_median,
  lower  = tox_lower,
  upper  = tox_upper
)
# Check that there are no missing values:
print(summary(eff_plot_data))
print(summary(tox_plot_data))
# -----------------------------
# STEP 4: Plot the Curves
# -----------------------------
# Plot for Efficacy (Green)
p_eff <- ggplot(eff_plot_data, aes(x = dose, y = median)) +
  geom_line(color = "green", size = 1.2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), fill = "green", alpha = 0.2) +
  scale_x_log10() +
  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
  labs(title = "Predicted Efficacy Curve",
       x = "Dose (mg, log scale)",
       y = "Efficacy Probability") +
  theme_minimal()
# Plot for Toxicity (Red)
p_tox <- ggplot(tox_plot_data, aes(x = dose, y = median)) +
  geom_line(color = "red", size = 1.2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), fill = "red", alpha = 0.2) +
  scale_x_log10() +
  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
  labs(title = "Predicted Toxicity Curve",
       x = "Dose (mg, log scale)",
       y = "Toxicity Probability") +
  theme_minimal()
# Print the plots
print(p_eff)
print(p_tox)
# -----------------------------
# (Optional) Save the Plots as PNG files
# -----------------------------
ggsave("final_efficacy_curve.png", plot = p_eff, width = 8, height = 6, dpi = 300)
ggsave("final_toxicity_curve.png", plot = p_tox, width = 8, height = 6, dpi = 300)
graphics.off()
# Final Combined Code for Optimal Dose Calculation and Plotting
# Assumptions:
#   - Your efficacy model is in 'orr_model_bayesian' and was fit using a binomial likelihood (with trials(N)).
#   - Your toxicity model is in 'toxicity_model' and was fit using a binomial likelihood (with trials(patients)).
#   - Both models use a predictor named 'dose'. The toxicity model also uses a log-transformed dose,
#     so a column "log(dose)" is required.
#   - Your original data are in 'dose_data' (for example) which contains a column 'dose' and (for toxicity) 'patients'.
#   - We extract predictions using posterior_epred() with transform=TRUE.
library(brms)
library(ggplot2)
library(dplyr)
# ----- Step 1: Prepare New Data for Prediction -----
# Use the dose range from your toxicity model's data (or dose_data)
dose_seq <- seq(min(dose_data$dose, na.rm = TRUE), max(dose_data$dose, na.rm = TRUE), length.out = 100)
newdata_pred <- data.frame(
  dose = dose_seq,
  # For the efficacy model, assume the trial size is in 'N'
  N = as.integer(round(median(dose_data$N, na.rm = TRUE))),
  # For the toxicity model, assume the trial size is in 'patients'
  patients = as.integer(round(median(dose_data$patients, na.rm = TRUE)))
)
# Create the log-transformed dose variable (exactly "log(dose)") as required by your toxicity model
newdata_pred$`log(dose)` <- log(newdata_pred$dose)
# ----- Step 2: Generate Posterior Predictions -----
# Efficacy predictions from the efficacy model (orr_model_bayesian)
eff_preds <- posterior_epred(orr_model_bayesian, newdata = newdata_pred, resp = "responders", transform = TRUE)
# Summarize: get median, 2.5% and 97.5% quantiles for each dose point
eff_median <- apply(eff_preds, 2, median)
eff_lower  <- apply(eff_preds, 2, quantile, 0.025)
eff_upper  <- apply(eff_preds, 2, quantile, 0.975)
eff_plot_data <- data.frame(
  dose = dose_seq,
  median = eff_median,
  lower = eff_lower,
  upper = eff_upper
)
# Toxicity predictions from the toxicity model (toxicity_model) 
# (Valid response variable name as indicated is "CRScases" 
â€“ check your model)
tox_preds <- posterior_epred(toxicity_model, newdata = newdata_pred, resp = "CRScases", transform = TRUE)
tox_median <- apply(tox_preds, 2, median)
tox_lower  <- apply(tox_preds, 2, quantile, 0.025)
tox_upper  <- apply(tox_preds, 2, quantile, 0.975)
tox_plot_data <- data.frame(
  dose = dose_seq,
  median = tox_median,
  lower = tox_lower,
  upper = tox_upper
)
# ----- Step 3: Define Combined Utility -----
# Here, we define utility as: Utility = Efficacy - Toxicity.
# (No extra weight is applied here since our previous run gave an optimum around 29 mg.)
utility_median <- eff_median - tox_median
utility_lower  <- eff_lower - tox_upper  # Conservative: lower efficacy minus upper toxicity
utility_upper  <- eff_upper - tox_lower  # Optimistic: upper efficacy minus lower toxicity
combined_data <- data.frame(
  dose = dose_seq,
  efficacy = eff_median,
  toxicity = tox_median,
  utility = utility_median,
  lower = utility_lower,
  upper = utility_upper
)
# ----- Step 4: Plot Final Curves -----
# Plot A: Separate Efficacy and Toxicity Curves
p_eff_tox <- ggplot() +
  geom_line(data = eff_plot_data, aes(x = dose, y = median), color = "green", size = 1.2) +
  geom_ribbon(data = eff_plot_data, aes(x = dose, ymin = lower, ymax = upper), fill = "green", alpha = 0.2) +
  geom_line(data = tox_plot_data, aes(x = dose, y = median), color = "red", size = 1.2) +
  geom_ribbon(data = tox_plot_data, aes(x = dose, ymin = lower, ymax = upper), fill = "red", alpha = 0.2) +
  scale_x_log10() +
  scale_y_continuous(limits = c(0, 1), breaks = seq(0,1, by = 0.1)) +
  labs(title = "Efficacy (Green) & Toxicity (Red) Curves",
       x = "Dose (mg, log scale)",
       y = "Probability") +
  theme_minimal()
# Plot B: Combined Utility Curve with Credible Intervals and Optimal Dose
p_utility <- ggplot(combined_data, aes(x = dose, y = utility)) +
  geom_line(color = "purple", size = 1.2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), fill = "purple", alpha = 0.2) +
  scale_x_log10() +
  labs(title = "Combined Risk-Benefit Utility Curve",
       x = "Dose (mg, log scale)",
       y = "Utility") +
  theme_minimal()
# ----- Step 5: Identify Optimal Dose -----
optimal_index <- which.max(combined_data$utility)
optimal_dose <- combined_data$dose[optimal_index]
# Annotate the optimal dose on the utility plot:
p_utility <- p_utility +
  geom_vline(xintercept = optimal_dose, linetype = "dashed", color = "black") +
  annotate("text", x = optimal_dose, y = max(combined_data$utility), 
           label = paste("Optimal Dose:", round(optimal_dose, 1), "mg"),
           vjust = -1, size = 5)
# Print final plots
print(p_eff_tox)
print(p_utility)
# Optionally, save the plots
ggsave("final_efficacy_toxicity_curve.png", plot = p_eff_tox, width = 8, height = 6, dpi = 300)
ggsave("final_utility_curve.png", plot = p_utility, width = 8, height = 6, dpi = 300)
cat("Optimal Dose based on the utility function is approximately:", optimal_dose, "mg\n")
graphics.off()
library(ggplot2)
library(dplyr)
# ----- Step 1: Prepare New Data for Prediction -----
# Use the dose range from your toxicity model's data (or your original dose_data)
dose_seq <- seq(min(toxicity_model$data$dose, na.rm = TRUE), 
                max(toxicity_model$data$dose, na.rm = TRUE), 
                length.out = 100)
# Create new prediction data. For toxicity, we need the trial size ("patients").
new_doses <- data.frame(
  dose = dose_seq,
  patients = as.integer(round(median(toxicity_model$data$patients, na.rm = TRUE)))
)
# Create the log-transformed dose variable (make sure the name exactly matches your model)
new_doses$`log(dose)` <- log(new_doses$dose)
# ----- Step 2: Generate Toxicity Predictions -----
# Use posterior_linpred() with transform=TRUE to get toxicity predictions (probabilities)
toxicity_preds <- posterior_linpred(toxicity_model, newdata = new_doses, transform = TRUE)
toxicity_probs <- apply(toxicity_preds, 2, median)
# ----- Step 3: Define Efficacy via a Piecewise Function -----
# Based on published data, assume efficacy (ORR) is 0 below 10 mg and 0.4 (40%) for doses >= 10 mg.
efficacy_probs <- ifelse(new_doses$dose < 10, 0, 0.4)
# ----- Step 4: Combine Predictions and Compute Utility -----
# Here, we define the simple utility as:
#   Utility = Efficacy (ORR) - Toxicity probability
combined_data <- data.frame(
  dose = new_doses$dose,
  efficacy = efficacy_probs,
  toxicity = toxicity_probs
) %>%
  mutate(utility = efficacy - toxicity)
# ----- Step 5: Plot the Efficacy and Toxicity Curves -----
p_eff_tox <- ggplot() +
  geom_line(data = data.frame(dose = new_doses$dose, efficacy = efficacy_probs), 
            aes(x = dose, y = efficacy), color = "green", size = 1.2) +
  geom_line(data = data.frame(dose = new_doses$dose, toxicity = toxicity_probs), 
            aes(x = dose, y = toxicity), color = "red", size = 1.2) +
  geom_ribbon(data = data.frame(dose = new_doses$dose, 
                                toxicity = toxicity_probs,
                                tox_lower = toxicity_probs,  # if you have uncertainty, replace with lower bound
                                tox_upper = toxicity_probs), 
              aes(x = dose, ymin = tox_lower, ymax = tox_upper), 
              fill = "red", alpha = 0.2) +
  scale_x_log10() +
  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
  labs(title = "Dose-Efficacy (Green) & Dose-Toxicity (Red) Curves",
       x = "Dose (mg, log scale)",
       y = "Probability") +
  theme_minimal()
# ----- Step 6: Plot the Combined Utility Curve -----
# (If you had posterior draws for utility, you would add a ribbon; here we plot the median utility.)
p_utility <- ggplot(combined_data, aes(x = dose, y = utility)) +
  geom_line(color = "purple", size = 1.2) +
  scale_x_log10() +
  labs(title = "Combined Risk-Benefit Utility Curve",
       x = "Dose (mg, log scale)",
       y = "Utility (Efficacy - Toxicity)") +
  theme_minimal()
# ----- Step 7: Determine the Optimal Dose -----
# Restrict the search to doses >= 10 mg because efficacy is defined as 0 below 10 mg.
effective_data <- filter(combined_data, dose >= 10)
optimal_index <- which.max(effective_data$utility)
optimal_dose <- effective_data$dose[optimal_index]
# Annotate the optimal dose on the utility plot:
p_utility <- p_utility +
  geom_vline(xintercept = optimal_dose, linetype = "dashed", color = "black") +
  annotate("text", x = optimal_dose, y = max(effective_data$utility), 
           label = paste("Optimal Dose:", round(optimal_dose, 1), "mg"),
           vjust = -1, size = 5)
# ----- Final: Print and Save Plots -----
print(p_eff_tox)
print(p_utility)
ggsave("final_efficacy_toxicity_curve.png", plot = p_eff_tox, width = 8, height = 6, dpi = 300)
ggsave("final_utility_curve.png", plot = p_utility, width = 8, height = 6, dpi = 300)
cat("Optimal Dose based on the utility function is approximately:", optimal_dose, "mg\n")
graphics.off()
library(brms)
# Efficacy submodel
bf_efficacy <- bf(
  responders | trials(N_eff) ~ s(log_dose, k = 4),
  nl = FALSE
)
# Toxicity submodel
bf_toxicity <- bf(
  CRS_cases | trials(N_tox) ~ s(log_dose, k = 4),
  nl = FALSE
)
mv_model <- brm(
  bf_efficacy + bf_toxicity,  # Combine the two submodels
  data = joint_data,
  family = list(binomial(link = "logit"), binomial(link = "logit")),
  # Optional: set priors, control, etc.
  iter = 4000, warmup = 2000, chains = 4, cores = 4,
  control = list(adapt_delta = 0.99, max_treedepth = 15)
)
summary(mv_model)
# Prepare a new data frame for predictions:
# For example, a sequence of doses spanning the observed range:
pred_doses <- seq(min(joint_data$dose), max(joint_data$dose), length.out = 100)
newdata_pred <- data.frame(
  dose = pred_doses,
  log_dose = log(pred_doses),
  N_eff = as.integer(round(median(joint_data$N_eff))),
  N_tox = as.integer(round(median(joint_data$N_tox)))
)
# Posterior predictions for efficacy
eff_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "responders", transform = TRUE)
eff_probs <- apply(eff_preds, 2, median)
# Posterior predictions for toxicity
tox_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "CRS_cases", transform = TRUE)
tox_probs <- apply(tox_preds, 2, median)
# Step 1: Check `joint_data` exists
if (!exists("joint_data")) stop("Error: `joint_data` not found. Ensure data is correctly merged.")
# Step 2: Prepare Dose Predictions
pred_doses <- seq(min(joint_data$dose, na.rm = TRUE), max(joint_data$dose, na.rm = TRUE), length.out = 100)
# Avoid log(0) errors
newdata_pred <- data.frame(
  dose = pred_doses,
  log_dose = log(pred_doses + 1e-6),
  N_eff = as.integer(round(median(joint_data$N_eff, na.rm = TRUE))),
  N_tox = as.integer(round(median(joint_data$N_tox, na.rm = TRUE)))
)
# Step 3: Posterior Predictions
# Ensure response variables are correctly named in `resp`
eff_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "responders", transform = TRUE)
tox_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "CRS_cases", transform = TRUE)
# Step 4: Summarize Predictions
eff_probs <- apply(eff_preds, 2, median)
tox_probs <- apply(tox_preds, 2, median)
# Step 5: Print Checkpoints
print("Predictions completed. Summary:")
summary(eff_probs)
summary(tox_probs)
eff_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "efficacy", transform = TRUE)
tox_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = "toxicity", transform = TRUE)
# Step 1: Find correct response variable names
valid_responses <- response_variables(mv_model)
print(valid_responses)  # Check available response variables
# Step 2: Use the correct names
eff_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = valid_responses[1], transform = TRUE)
tox_preds <- posterior_epred(mv_model, newdata = newdata_pred, resp = valid_responses[2], transform = TRUE)
# Step 3: Compute median probabilities
eff_probs <- apply(eff_preds, 2, median)
tox_probs <- apply(tox_preds, 2, median)
# Step 4: Print check
summary(eff_probs)
summary(tox_probs)
response_variables(mv_model)
# Suppose we have posterior draws for both models:
# efficacy_draws: dim ~ (#draws, #dose_points)
# toxicity_draws: dim ~ (#draws, #dose_points)
# Then for each draw, we compute utility_draws = efficacy_draws - w * toxicity_draws
# For example:
utility_draws <- efficacy_draws - 0.5 * toxicity_draws  # if w=0.5
# Summarize across draws:
utility_median <- apply(utility_draws, 2, median)
utility_lower  <- apply(utility_draws, 2, quantile, 0.025)
utility_upper  <- apply(utility_draws, 2, quantile, 0.975)
plot_data <- data.frame(
  dose   = dose_seq,
  median = utility_median,
  lower  = utility_lower,
  upper  = utility_upper
)
ggplot(plot_data, aes(x = dose, y = median)) +
  geom_line(color = "purple") +
  geom_ribbon(aes(ymin = lower, ymax = upper), fill = "purple", alpha = 0.2) +
  scale_x_log10() +
  labs(title = "Posterior Uncertainty in Utility",
       x = "Dose (mg, log scale)",
       y = "Utility") +
  theme_minimal()
geom_vline(xintercept = log(29), linetype = "dashed", color = "red")
geom_vline(xintercept = log(29), linetype = "dashed", color = "red")
 geom_vline(xintercept = log(29), linetype = "dashed", color = "red")
mapping: xintercept = ~xintercept 
geom_vline: na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity 
> range(log(pred_doses))
ggplot(...) +
  geom_line(aes(x = log(dose), y = utility), color = "purple") +
  geom_ribbon(aes(x = log(dose), ymin = lower, ymax = upper), fill = "purple", alpha = 0.2) +
  geom_vline(xintercept = log(29), linetype = "dashed", color = "red") +
  theme_minimal()
geom_vline(aes(xintercept = log(29)), linetype = "dashed", color = "red")
log(29)
graphics.off()
# Example structure of joint_data:
# joint_data <- data.frame(
#   dose       = c(0.1, 0.3, 1, 3, 10, 30, 100),
#   log_dose   = log(c(0.1, 0.3, 1, 3, 10, 30, 100)),
#   responders = c(1, 3, 8, 12, 15, 20, 22),  # Efficacy successes
#   N_eff      = c(5, 5, 10, 10, 15, 15, 20), # Efficacy total
#   CRS_cases  = c(0, 0, 2, 3, 5, 8, 10),     # Toxicity events
#   N_tox      = c(5, 5, 10, 10, 15, 15, 20)  # Toxicity total
# )
# Check that you actually have the columns named exactly like in the model code below.
w <- 0.5  # weigh toxicity half as strongly as efficacy
plot_data <- data.frame(
  dose = pred_doses,
  efficacy = eff_probs,
  toxicity = tox_probs
) %>%
  mutate(utility = efficacy - w * toxicity)
library(ggplot2)
p1 <- ggplot(plot_data, aes(x = dose)) +
  geom_line(aes(y = efficacy), color = "green", size = 1.2) +
  geom_line(aes(y = toxicity), color = "red", size = 1.2) +
  scale_x_log10() +
  labs(
    title = "Joint Model: Efficacy (Green) & Toxicity (Red)",
    x = "Dose (mg, log scale)",
    y = "Probability"
  ) +
  theme_minimal()
p2 <- ggplot(plot_data, aes(x = dose, y = utility)) +
  geom_line(color = "purple", size = 1.2) +
  scale_x_log10() +
  labs(
    title = paste0("Joint Model Utility = Efficacy - ", w, " * Toxicity"),
    x = "Dose (mg, log scale)",
    y = "Utility"
  ) +
  theme_minimal()
print(p1)
print(p2)
# Find the dose that maximizes utility
optimal_index <- which.max(plot_data$utility)
optimal_dose  <- plot_data$dose[optimal_index]
cat("Optimal Dose is approx:", optimal_dose, "mg\n")
graphics.off()
###############################################################################
## FINAL CODE: Posterior Uncertainty in Utility
## Efficacy(d) = 0.4 * d^3 / (d^3 + 10^3)
## Toxicity(d) from posterior draws of toxicity_model (resp = "CRScases")
## Utility = Efficacy - 0.5 * Toxicity
###############################################################################
library(brms)
library(dplyr)
library(ggplot2)
###############################################################################
# STEP 1: Define Efficacy Function & Prepare Dose Range
###############################################################################
# Efficacy function: logistic-like
efficacy_function <- function(d) {
  Emax <- 0.4
  D50  <- 10
  k    <- 3
  Emax * (d^k) / (d^k + D50^k)
}
# Create dose range
dose_seq <- seq(0.003, 100, length.out = 100)  # your min, max from the figure
# Weight factor for toxicity
w <- 0.5
###############################################################################
# STEP 2: Prepare new data for the toxicity model & get posterior draws
###############################################################################
# We'll assume your toxicity_model was fit with a column "patients" for trials
# and a predictor "log(dose)" for the effect.
# For posterior_linpred() or posterior_epred(), we need a data frame with columns:
#   dose, log(dose), and patients (median or typical sample size).
median_patients <- as.integer(round(median(toxicity_model$data$patients, na.rm = TRUE)))
# Build new data for the toxicity model
tox_newdata <- data.frame(
  dose = dose_seq,
  `log(dose)` = log(dose_seq),
  patients = median_patients
)
# Extract full posterior draws for toxicity in probability space
# (response = "CRScases" if your model uses CRScases as the outcome variable)
tox_draws <- posterior_epred(toxicity_model, newdata = tox_newdata, resp = "CRScases", transform = TRUE)
# dim(tox_draws) => (# MCMC draws) x (100 dose points)
###############################################################################
# STEP 3: Compute Efficacy & Utility for Each Posterior Draw
###############################################################################
# Efficacy is deterministic (no posterior) => single vector of length 100
efficacy_vector <- sapply(dose_seq, efficacy_function)
# We'll expand that to match the dimension of tox_draws so we can do draw-wise subtraction
# i.e., replicate the efficacy vector across all posterior draws (rows)
eff_draws <- matrix(rep(efficacy_vector, nrow(tox_draws)), 
                    nrow = nrow(tox_draws), byrow = TRUE)
# Utility draws: Utility(d) = Efficacy(d) - w * Toxicity(d)
utility_draws <- eff_draws - w * tox_draws
###############################################################################
# STEP 4: Summarize Posterior Utility
###############################################################################
# For each dose column, compute median, 2.5% and 97.5% quantiles
utility_median <- apply(utility_draws, 2, median)
utility_lower  <- apply(utility_draws, 2, quantile, 0.025)
utility_upper  <- apply(utility_draws, 2, quantile, 0.975)
# Combine into data frame for plotting
plot_data <- data.frame(
  dose   = dose_seq,
  median = utility_median,
  lower  = utility_lower,
  upper  = utility_upper
)
###############################################################################
# STEP 5: Plot Posterior Utility Curve with Uncertainty
###############################################################################
p_utility <- ggplot(plot_data, aes(x = dose, y = median)) +
  geom_line(color = "purple", size = 1.2) +
  geom_ribbon(aes(ymin = lower, ymax = upper), fill = "purple", alpha = 0.2) +
  scale_x_log10() +
  labs(title = paste0("Posterior Uncertainty in Utility\nUtility = Efficacy(d) - ",
                      w, " * Toxicity(d)\n(k=3, D50=10)"),
       x = "Dose (mg, log scale)",
       y = "Utility") +
  theme_minimal()
# Print the plot
print(p_utility)
###############################################################################
# STEP 6: Identify the Dose that Maximizes Median Utility
###############################################################################
optimal_index <- which.max(plot_data$median)
optimal_dose  <- plot_data$dose[optimal_index]
# Annotate the optimal dose on the plot
p_utility_annotated <- p_utility +
  geom_vline(xintercept = optimal_dose, linetype = "dashed", color = "black") +
  annotate("text", x = optimal_dose, y = max(plot_data$median),
           label = paste("Optimal Dose:", round(optimal_dose, 1), "mg"),
           vjust = -1, size = 5)
# Print the annotated version
print(p_utility_annotated)
###############################################################################
# (Optional) Save the Plot
###############################################################################
ggsave("posterior_utility_curve.png", plot = p_utility_annotated,
       width = 8, height = 6, dpi = 300)
cat("Optimal Dose ~", optimal_dose, "mg\n")
# Example: use 0.003 mg as a small nonzero minimum
dose_seq <- seq(0.003, 100, length.out = 100)
range(dose_seq)
save.image("C:\\Users\\rauna\\OneDrive\\Desktop\\onco r")
save.image("C:\\Users\\rauna\\OneDrive\\Documents\\onco rr")
q()
ljfghj
print(a)
a=
print a
a=2
print a
q()
